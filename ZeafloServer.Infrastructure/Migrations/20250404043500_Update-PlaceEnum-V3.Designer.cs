// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZeafloServer.Infrastructure.Database;

#nullable disable

namespace ZeafloServer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250404043500_Update-PlaceEnum-V3")]
    partial class UpdatePlaceEnumV3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZeafloServer.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longtitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("postal_code");

                    b.HasKey("CityId");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("comment_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.FriendShip", b =>
                {
                    b.Property<Guid>("FriendShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("friend_ship_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("FriendId")
                        .HasColumnType("uuid")
                        .HasColumnName("friend_id");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("FriendShipId");

                    b.HasIndex("FriendId");

                    b.HasIndex("UserId");

                    b.ToTable("FriendShips", t =>
                        {
                            t.HasCheckConstraint("CK_FriendShip_Status", "status IN ('Pending', 'Accepted', 'Blocked')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Like", b =>
                {
                    b.Property<Guid>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("like_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LikeId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.MapTheme", b =>
                {
                    b.Property<Guid>("MapThemeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("map_theme_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("boolean")
                        .HasColumnName("is_premium");

                    b.Property<string>("MapStyle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("map_style");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PreviewUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preview_url");

                    b.HasKey("MapThemeId");

                    b.ToTable("MapThemes");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.MemberShipLevel", b =>
                {
                    b.Property<Guid>("MemberShipLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("member_ship_level_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("MinPoint")
                        .HasColumnType("int")
                        .HasColumnName("min_point");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("MemberShipLevelId");

                    b.ToTable("MemberShipLevels", t =>
                        {
                            t.HasCheckConstraint("CK_MemberShipLevel_Type", "type IN ('Silver', 'Gold', 'Diamond')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("text")
                        .HasColumnName("media_url");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uuid")
                        .HasColumnName("receiver_id");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("reference_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", t =>
                        {
                            t.HasCheckConstraint("CK_Notification_Type", "type IN ('Like', 'Comment', 'FriendRequest', 'Message')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PasswordResetToken", b =>
                {
                    b.Property<Guid>("PasswordResetTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("password_reset_token_id");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int")
                        .HasColumnName("attempt_count");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(6)")
                        .HasColumnName("code");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("expires_at");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("PasswordResetTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("PasswordResetTokens");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Place", b =>
                {
                    b.Property<Guid>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("place_id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean")
                        .HasColumnName("is_open");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longtitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("name");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int")
                        .HasColumnName("review_count");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("PlaceId");

                    b.HasIndex("CityId");

                    b.ToTable("Places", t =>
                        {
                            t.HasCheckConstraint("CK_Place_Type", "type IN ('Restaurant', 'Coffee', 'Hotel', 'HomeStay', 'Resort', 'Market', 'Church', 'Museum', 'Tunnel', 'Zoo', 'Park')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PlaceImage", b =>
                {
                    b.Property<Guid>("PlaceImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("place_image_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("place_id");

                    b.HasKey("PlaceImageId");

                    b.HasIndex("PlaceId");

                    b.ToTable("PlacesImage");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PlaceLike", b =>
                {
                    b.Property<Guid>("PlaceLikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("place_like_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("place_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("PlaceLikeId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("PlacesLike");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", t =>
                        {
                            t.HasCheckConstraint("CK_Post_Visibility", "visibility IN ('Public', 'Friends', 'Private')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PostMedia", b =>
                {
                    b.Property<Guid>("PostMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("post_media_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("media_type");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("media_url");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.HasKey("PostMediaId");

                    b.HasIndex("PostId");

                    b.ToTable("PostMedia", t =>
                        {
                            t.HasCheckConstraint("CK_PostMedia_MediaType", "media_type IN ('Image', 'Video', 'Gif', 'None')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PostReaction", b =>
                {
                    b.Property<Guid>("PostReactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("post_reaction_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<string>("ReactionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reaction_type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("PostReactionId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReactions", t =>
                        {
                            t.HasCheckConstraint("CK_PostReaction_ReactionType", "reaction_type IN ('Like', 'Dislike', 'Love', 'Wow', 'Sad', 'Angry')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Processing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProcessingId")
                        .HasColumnType("uuid")
                        .HasColumnName("processing_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Processing");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("report_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ReportId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports", t =>
                        {
                            t.HasCheckConstraint("CK_Report_Status", "status IN ('Pending', 'Resolved', 'Rejected')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.SavePost", b =>
                {
                    b.Property<Guid>("SavePostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("save_post_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("SavePostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("SavePosts");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("note");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("TripDurationId")
                        .HasColumnType("uuid")
                        .HasColumnName("trip_duration_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ScheduleId");

                    b.HasIndex("CityId");

                    b.HasIndex("TripDurationId");

                    b.HasIndex("UserId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.StoryActivity", b =>
                {
                    b.Property<Guid>("StoryActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("story_activity_id");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("PointEarned")
                        .HasColumnType("int")
                        .HasColumnName("point_earned");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("StoryActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("StoryActivities", t =>
                        {
                            t.HasCheckConstraint("CK_StoryActivity_ActionType", "action_type IN ('Send', 'View', 'Receive')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Token", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("token_id");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("access_token");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRefreshTokenRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_refresh_token_revoked");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiredDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("refresh_token_expired_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.TripDuration", b =>
                {
                    b.Property<Guid>("TripDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("trip_duration_id");

                    b.Property<int>("Days")
                        .HasColumnType("int")
                        .HasColumnName("days");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("label");

                    b.Property<int>("Nights")
                        .HasColumnType("int")
                        .HasColumnName("nights");

                    b.HasKey("TripDurationId");

                    b.ToTable("TripDurations");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp")
                        .HasColumnName("birth_date");

                    b.Property<string>("CoverPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_photo_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_online");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_login_time");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("QrUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qr_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.Property<string>("Website")
                        .HasColumnType("text")
                        .HasColumnName("website");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_User_Gender", "gender IN ('Male', 'Female', 'Other')");
                        });
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.UserLevel", b =>
                {
                    b.Property<Guid>("UserLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_level_id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("assigned_at");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberShipLevelId")
                        .HasColumnType("uuid")
                        .HasColumnName("member_ship_level_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("ZeafloPoint")
                        .HasColumnType("int")
                        .HasColumnName("zeaflo_point");

                    b.HasKey("UserLevelId");

                    b.HasIndex("MemberShipLevelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserLevels");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.UserStatus", b =>
                {
                    b.Property<Guid>("UserStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_status_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean")
                        .HasColumnName("is_online");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_seen");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("UserStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("UserStatuses");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Comment", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Post_PostId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User_UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.FriendShip", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "Friend")
                        .WithMany("Friends")
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FriendShip_User_FriendId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("FriendShips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FriendShip_User_UserId");

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Like", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Like_Post_PostId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Like_User_UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Message", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "Receiver")
                        .WithMany("ReceiverMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Message_User_ReceiverId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "Sender")
                        .WithMany("SenderMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Message_User_SenderId");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Notification", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PasswordResetToken", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("PasswordResetTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PasswordResetToken_User_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Place", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.City", "City")
                        .WithMany("Places")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Place_City_CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PlaceImage", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.Place", "Place")
                        .WithMany("PlaceImages")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PlaceImage_Place_PlaceId");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PlaceLike", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.Place", "Place")
                        .WithMany("PlaceLikes")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PlaceLike_Place_PlaceId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("PlaceLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PlaceLike_User_UserId");

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Post", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Post_User_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PostMedia", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.Post", "Post")
                        .WithMany("PostMedias")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostMedia_Post_PostId");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.PostReaction", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.Post", "Post")
                        .WithMany("PostReactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostReaction_Post_PostId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("PostReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_PostReaction_User_UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Processing", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithOne("Processing")
                        .HasForeignKey("ZeafloServer.Domain.Entities.Processing", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Report", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Report_Post_PostId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Report_User_UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.SavePost", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.Post", "Post")
                        .WithMany("SavePosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SavePost_Post_PostId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("SavePosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_SavePost_User_UserId");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.City", "City")
                        .WithMany("Schedules")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_City_CityId");

                    b.HasOne("ZeafloServer.Domain.Entities.TripDuration", "TripDuration")
                        .WithMany("Schedules")
                        .HasForeignKey("TripDurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_TripDuration_TripDurationId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("Schedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_User_UserId");

                    b.Navigation("City");

                    b.Navigation("TripDuration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.StoryActivity", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("StoryActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_StoryActivity_User_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Token", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Token_User_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.UserLevel", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.MemberShipLevel", "MemberShipLevel")
                        .WithMany("UserLevels")
                        .HasForeignKey("MemberShipLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserLevel_MemberShipLevel_MemberShipLevelId");

                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithOne("UserLevel")
                        .HasForeignKey("ZeafloServer.Domain.Entities.UserLevel", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserLevel_User_UserId");

                    b.Navigation("MemberShipLevel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.UserStatus", b =>
                {
                    b.HasOne("ZeafloServer.Domain.Entities.User", "User")
                        .WithMany("UserStatuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserStatus_User_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.City", b =>
                {
                    b.Navigation("Places");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.MemberShipLevel", b =>
                {
                    b.Navigation("UserLevels");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Place", b =>
                {
                    b.Navigation("PlaceImages");

                    b.Navigation("PlaceLikes");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PostMedias");

                    b.Navigation("PostReactions");

                    b.Navigation("Reports");

                    b.Navigation("SavePosts");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.TripDuration", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("ZeafloServer.Domain.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FriendShips");

                    b.Navigation("Friends");

                    b.Navigation("Likes");

                    b.Navigation("Notifications");

                    b.Navigation("PasswordResetTokens");

                    b.Navigation("PlaceLikes");

                    b.Navigation("PostReactions");

                    b.Navigation("Posts");

                    b.Navigation("Processing");

                    b.Navigation("ReceiverMessages");

                    b.Navigation("Reports");

                    b.Navigation("SavePosts");

                    b.Navigation("Schedules");

                    b.Navigation("SenderMessages");

                    b.Navigation("StoryActivities");

                    b.Navigation("Tokens");

                    b.Navigation("UserLevel");

                    b.Navigation("UserStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
